var searchIndex = JSON.parse('{\
"rustacuda":{"doc":"This crate provides a safe, user-friendly wrapper around â€¦","t":[3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,11,11,11,11,0,0,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,5,11,11,11,11,11,11,11,14,11,0,11,0,11,11,11,11,11,0,5,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,4,3,3,8,3,3,13,13,13,13,13,18,18,13,13,13,13,13,13,13,4,18,18,18,18,4,13,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,3,4,4,3,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,13,13,13,13,13,13,4,6,13,6,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,18,18,18,3,3,4,18,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,3,13,13,3,4,3,13,13,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,12,12,12,12,8,8,8,8,8,3,3,3,3,3,3,3,8,3,3,3,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,10,11,10,11,11,11,11,10,11,10,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,10,11,10,11,11,11,11,11,11,11,5,5,5,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,10,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,4,3,3,18,13,13,18,18,13,13,13,18,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,3,3,10,10,18,18,18,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["CudaApiVersion","CudaFlags","all","bitand","bitand_assign","bitor","bitor_assign","bits","bitxor","bitxor_assign","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","cmp","complement","contains","context","device","difference","empty","eq","eq","error","event","extend","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","function","get","hash","hash","init","insert","intersection","intersects","into","into","is_all","is_empty","launch","major","memory","minor","module","ne","ne","not","partial_cmp","partial_cmp","prelude","quick_init","remove","set","stream","sub","sub_assign","symmetric_difference","to_owned","to_owned","toggle","try_from","try_from","try_into","try_into","type_id","type_id","union","CacheConfig","Context","ContextFlags","ContextHandle","ContextStack","CurrentContext","DefaultBankSize","DeviceRuntimePendingLaunchCount","DeviceRuntimeSynchronizeDepth","EightByteBankSize","FourByteBankSize","LMEM_RESIZE_TO_MAX","MAP_HOST","MallocHeapSize","MaxL2FetchGranularity","PreferEqual","PreferL1","PreferNone","PreferShared","PrintfFifoSize","ResourceLimit","SCHED_AUTO","SCHED_BLOCKING_SYNC","SCHED_SPIN","SCHED_YIELD","SharedMemoryConfig","StackSize","StreamPriorityRange","UnownedContext","all","bitand","bitand_assign","bitor","bitor_assign","bits","bitxor","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","complement","contains","create_and_push","difference","disable_peer_access","drop","drop","empty","enable_peer_access","eq","eq","eq","eq","eq","extend","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","get_api_version","get_api_version","get_cache_config","get_current","get_device","get_flags","get_inner","get_inner","get_resource_limit","get_shared_memory_config","get_stream_priority_range","get_unowned","greatest","hash","hash","hash","hash","hash","insert","intersection","intersects","into","into","into","into","into","into","into","into","into","is_all","is_empty","least","ne","ne","not","partial_cmp","pop","push","remove","set","set_cache_config","set_current","set_resource_limit","set_shared_memory_config","sub","sub_assign","symmetric_difference","synchronize","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","toggle","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","union","AccessSupported","AsyncEngineCount","CanFlushRemoteWrites","CanMapHostMemory","CanUse64BitStreamMemOps","CanUseHostPointerForRegisteredMem","CanUseStreamMemOps","CanUseStreamWaitValueNor","ClockRate","ComputeCapabilityMajor","ComputeCapabilityMinor","ComputeMode","ComputePreemptionSupported","ConcurrentKernels","ConcurrentManagedAccess","CooperativeLaunch","CooperativeMultiDeviceLaunch","CudaArrayAccessSupported","Device","DeviceAttribute","DeviceP2PAttribute","Devices","DirectManagedMemAccessFromHost","EccEnabled","GenericCompressionSupported","GlobalL1CacheSupported","GlobalMemoryBusWidth","GpuDirectRdmaWithCudaVmnSupported","HandleTypePosixFileDescriptorSupported","HandleTypeWin32HandleSupported","HandleTypeWin32KmtHandleSupported","HostNativeAtomicSupported","HostRegisterSupported","Integrated","KernelExecTimeout","L2CacheSize","LocalL1CacheSupported","ManagedMemory","MaxAccessPolicyWindowSize","MaxBlockDimX","MaxBlockDimY","MaxBlockDimZ","MaxBlocksPerMultiprocessor","MaxGridDimX","MaxGridDimY","MaxGridDimZ","MaxPersistingL2CacheSize","MaxPitch","MaxRegistersPerBlock","MaxRegistersPerMultiprocessor","MaxSharedMemoryPerBlock","MaxSharedMemoryPerBlockOptin","MaxSharedMemoryPerMultiprocessor","MaxThreadsPerBlock","MaxThreadsPerMultiprocessor","MaximumSurface1DLayeredLayers","MaximumSurface1DLayeredWidth","MaximumSurface1DWidth","MaximumSurface2DHeight","MaximumSurface2DLayeredHeight","MaximumSurface2DLayeredLayers","MaximumSurface2DLayeredWidth","MaximumSurface2DWidth","MaximumSurface3DDepth","MaximumSurface3DHeight","MaximumSurface3DWidth","MaximumSurfacecubemapLayeredLayers","MaximumSurfacecubemapLayeredWidth","MaximumSurfacecubemapWidth","MaximumTexture1DLayeredLayers","MaximumTexture1DLayeredWidth","MaximumTexture1DLinearWidth","MaximumTexture1DMipmappedWidth","MaximumTexture1DWidth","MaximumTexture2DGatherHeight","MaximumTexture2DGatherWidth","MaximumTexture2DHeight","MaximumTexture2DLayeredHeight","MaximumTexture2DLayeredLayers","MaximumTexture2DLayeredWidth","MaximumTexture2DLinearHeight","MaximumTexture2DLinearPitch","MaximumTexture2DLinearWidth","MaximumTexture2DMipmappedHeight","MaximumTexture2DMipmappedWidth","MaximumTexture2DWidth","MaximumTexture3DDepth","MaximumTexture3DDepthAlternate","MaximumTexture3DHeight","MaximumTexture3DHeightAlternate","MaximumTexture3DWidth","MaximumTexture3DWidthAlternate","MaximumTextureCubemapLayeredLayers","MaximumTextureCubemapLayeredWidth","MaximumTextureCubemapWidth","MemoryClockRate","MemoryPoolsSupported","MultiGpuBoard","MultiGpuBoardGroupId","MultiprocessorCount","NativeAtomicSupported","PageableMemoryAccess","PageableMemoryAccessUsesHostPageTables","PciBusId","PciDeviceId","PciDomainId","PerformanceRank","ReadOnlyHostRegisterSupported","ReservedSharedMemoryPerBlock","SingleToDoublePrecisionPerfRatio","SparseCudaArraySupported","StreamPrioritiesSupported","SurfaceAlignment","TccDriver","TextureAlignment","TexturePitchAlignment","TimelineSemaphoreInteropSupported","TotalConstantMemory","UnifiedAddressing","VirtualMemoryManagementSupported","WarpSize","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","can_access_peer","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","devices","eq","eq","eq","fmt","fmt","fmt","fmt","from","from","from","from","get_attribute","get_device","get_p2p_attribute","hash","hash","hash","into","into","into","into","into_iter","name","ne","next","num_devices","to_owned","to_owned","to_owned","to_owned","total_memory","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","AlreadyAcquired","AlreadyMapped","ArrayIsMapped","AssertError","ContextAlreadyCurrent","ContextAlreadyInUse","ContextIsDestroyed","CudaError","CudaResult","Deinitialized","DropResult","EccUncorrectable","FileNotFound","HardwareStackError","HostMemoryAlreadyRegistered","HostMemoryNotRegistered","IllegalAddress","IllegalInstruction","InvalidAddressSpace","InvalidContext","InvalidDevice","InvalidGraphicsContext","InvalidHandle","InvalidImage","InvalidMemoryAllocation","InvalidProgramCounter","InvalidPtx","InvalidSouce","InvalidValue","LaunchFailed","LaunchIncompatibleTexturing","LaunchOutOfResources","LaunchTimeout","MapFailed","MisalignedAddress","NoBinaryForGpu","NoDevice","NotFound","NotInitialized","NotMapped","NotMappedAsArray","NotMappedAsPointer","NotPermitted","NotReady","NotSupported","NvlinkUncorrectable","OperatingSystemError","OutOfMemory","PeerAccessAlreadyEnabled","PeerAccessNotEnabled","PeerAccessUnsupported","PrimaryContextActive","ProfilerAlreadyStarted","ProfilerAlreadyStopped","ProfilerDisabled","ProfilerNotInitialized","SharedObjectInitFailed","SharedObjectSymbolNotFound","TooManyPeers","UnknownError","UnmapFailed","UnsupportedLimit","borrow","borrow_mut","clone","clone_into","eq","fmt","fmt","from","into","to_owned","to_string","try_from","try_into","type_id","BLOCKING_SYNC","DEFAULT","DISABLE_TIMING","Event","EventFlags","EventStatus","INTERPROCESS","NotReady","Ready","all","bitand","bitand_assign","bitor","bitor_assign","bits","bitxor","bitxor_assign","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","complement","contains","difference","drop","drop","elapsed_time_f32","empty","eq","eq","extend","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","hash","insert","intersection","intersects","into","into","into","is_all","is_empty","ne","new","not","partial_cmp","query","record","remove","set","sub","sub_assign","symmetric_difference","synchronize","to_owned","to_owned","toggle","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","union","BinaryVersion","BlockSize","CacheModeCa","ConstSizeBytes","Function","FunctionAttribute","GridSize","LocalSizeBytes","MaxDynamicSharedMemorySizeBytes","MaxThreadsPerBlock","NumRegisters","PreferredSharedMemoryCarveOut","PtxVersion","SharedMemorySizeBytes","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","eq","eq","eq","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","get_attribute","hash","into","into","into","into","ne","ne","set_cache_config","set_max_dynamic_shared_mem","set_shared_memory_config","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","x","x","x","x","xy","xy","xyz","xyz","y","y","z","z","AsyncCopyDestination","AsyncCopyPeer","AsyncSetDestination","CopyDestination","CopyPeer","DeviceBox","DeviceBuffer","DeviceChunks","DeviceChunksMut","DevicePointer","DeviceSlice","LockedBuffer","SetDestination","UnifiedBox","UnifiedBuffer","UnifiedPointer","add","add","array","as_device_ptr","as_device_ptr","as_mut","as_mut","as_mut","as_mut_ptr","as_mut_slice","as_mut_slice","as_ptr","as_raw","as_raw","as_raw_mut","as_raw_mut","as_ref","as_ref","as_ref","as_slice","as_slice","as_unified_ptr","as_unified_ptr","async_copy_from","async_copy_from","async_copy_from","async_copy_from","async_copy_from","async_copy_peer","async_copy_peer","async_copy_to","async_copy_to","async_copy_to","async_copy_to","async_copy_to","async_set_u16","async_set_u16","async_set_u32","async_set_u32","async_set_u8","async_set_u8","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","chunks","chunks_mut","clone","clone","clone","clone_into","clone_into","clone_into","cmp","cmp","cmp","copy_from","copy_from","copy_from","copy_from","copy_from","copy_from","copy_peer","copy_peer","copy_to","copy_to","copy_to","copy_to","copy_to","copy_to","count","count","cuda_free","cuda_free_locked","cuda_free_unified","cuda_malloc","cuda_malloc_locked","cuda_malloc_unified","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from_device","from_raw","from_raw","from_raw_parts","from_raw_parts","from_raw_parts","from_raw_parts","from_raw_parts_mut","from_slice","from_slice","from_slice","from_slice_async","from_unified","ge","gt","hash","hash","hash","index","index","index","index","index","index","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","into","into","into","into","into","into","into","into","into","into_device","into_iter","into_iter","into_unified","is_empty","is_null","is_null","last","last","le","leak","len","lt","new","new","new","new","next","next","next_back","next_back","nth","nth","null","null","offset","offset","partial_cmp","partial_cmp","partial_cmp","set_u16","set_u16","set_u32","set_u32","set_u8","set_u8","size_hint","size_hint","split_at","split_at_mut","sub","sub","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","uninitialized","uninitialized","uninitialized","uninitialized","uninitialized","wrap","wrap","wrapping_add","wrapping_add","wrapping_offset","wrapping_offset","wrapping_sub","wrapping_sub","zeroed","zeroed","ArrayDescriptor","ArrayFormat","ArrayObject","ArrayObjectFlags","CUBEMAP","Float","Half","LAYERED","SURFACE_LDST","SignedInt16","SignedInt32","SignedInt8","TEXTURE_GATHER","UnsignedInt16","UnsignedInt32","UnsignedInt8","all","bitand","bitand_assign","bitor","bitor_assign","bits","bitxor","bitxor_assign","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","cmp","complement","contains","default","depth","descriptor","difference","dims","drop","drop","empty","eq","eq","extend","flags","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","format","from","from","from","from","from_bits","from_bits_truncate","from_bits_unchecked","from_descriptor","from_dims_format","from_iter","from_raw","from_raw","hash","height","insert","intersection","intersects","into","into","into","into","is_all","is_empty","ne","new","new","new","new_1d","new_2d","new_cubemap","new_layered","new_layered_1d","new_layered_cubemap","not","num_channels","partial_cmp","remove","set","set_depth","set_dims","set_flags","set_format","set_height","set_num_channels","set_width","sub","sub_assign","symmetric_difference","to_owned","to_owned","to_owned","to_raw","toggle","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","union","width","Module","Symbol","borrow","borrow","borrow_mut","borrow_mut","copy_from","copy_to","drop","drop","fmt","fmt","fmt","from","from","get_function","get_global","into","into","load_from_file","load_from_string","try_from","try_from","try_into","try_into","type_id","type_id","CopyDestination","DeviceBuffer","UnifiedBuffer","copy_from","copy_to","DEFAULT","DEFAULT","NON_BLOCKING","Stream","StreamFlags","StreamWaitEventFlags","add_callback","all","all","as_inner","bitand","bitand","bitand_assign","bitand_assign","bitor","bitor","bitor_assign","bitor_assign","bits","bits","bitxor","bitxor","bitxor_assign","bitxor_assign","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","cmp","complement","complement","contains","contains","difference","difference","drop","drop","empty","empty","eq","eq","extend","extend","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from_bits","from_bits","from_bits_truncate","from_bits_truncate","from_bits_unchecked","from_bits_unchecked","from_iter","from_iter","get_flags","get_priority","hash","hash","insert","insert","intersection","intersection","intersects","intersects","into","into","into","is_all","is_all","is_empty","is_empty","ne","ne","new","not","not","partial_cmp","partial_cmp","remove","remove","set","set","sub","sub","sub_assign","sub_assign","symmetric_difference","symmetric_difference","synchronize","to_owned","to_owned","toggle","toggle","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","union","union","wait_event"],"q":["rustacuda","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rustacuda::contextrustacuda::devicerustacuda::error","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rustacuda::event","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rustacuda::function","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rustacuda::memoryrustacuda::memory::array","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rustacuda::module","","","","","","","","","","","","","","","","","","","","","","","","","","","rustacuda::prelude","","","","","rustacuda::stream","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Struct representing the CUDA API version number.","Bit flags for initializing the CUDA driver. Currently, no â€¦","Returns the set containing all flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags â€¦","Toggles the set of flags.","","","","","","","","","","","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained â€¦","CUDA context management","Functions and types for enumerating CUDA devices and â€¦","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns an empty set of flags.","","","Types for error handling","Events can be used to track status and dependencies, as â€¦","","","","","","","","","","Convert from underlying bit representation, unless that â€¦","Convert from underlying bit representation, dropping any â€¦","Convert from underlying bit representation, preserving all â€¦","","Functions and types for working with CUDA kernels.","Returns the latest CUDA version supported by the CUDA â€¦","","","Initialize the CUDA Driver API.","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and â€¦","Returns <code>true</code> if there are flags common to both <code>self</code> and â€¦","","","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","Launch a global kernel function asynchronously.","Return the major version number â€” eg. the 9 in version â€¦","Access to CUDAâ€™s memory allocation and transfer â€¦","Return the minor version number â€” eg. the 2 in version â€¦","Functions and types for working with CUDA modules.","","","Returns the complement of this set of flags.","","","This module re-exports a number of commonly-used types for â€¦","Shortcut for initializing the CUDA Driver API and creating â€¦","Removes the specified flags in-place.","Inserts or removes the specified flags depending on the â€¦","Streams of work for the device to perform.","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> â€¦","","","Toggles the specified flags in-place.","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","This enumeration represents configuration settings for â€¦","Owned handle to a CUDA context.","Bit flags for initializing the CUDA context.","Sealed trait for <code>Context</code> and <code>UnownedContext</code>. Not intended â€¦","Type used to represent the thread-local context stack.","Type representing the top context in the thread-local â€¦","Set shared-memory bank size to the default.","The maximum number of outstanding device runtime launches â€¦","The maximum nesting depth of a grid at which a thread can â€¦","Set shared-memory bank width to eight bytes","Set shared-memory bank width to four bytes","Instruct CUDA not to reduce local memory after resizing â€¦","Instructs CUDA to support mapped pinned allocations. This â€¦","The size in bytes of the heap used by the <code>malloc()</code> and â€¦","L2 cache fetch granularity","Prefer equal-sized L1 cache and shared memory","Prefer larger L1 cache and smaller shared memory","No preference for shared memory or L1 (default)","Prefer larger shared memory and smaller L1 cache","The size in bytes of the FIFO used by the <code>printf()</code> device â€¦","This enumeration represents the limited resources which â€¦","Instructs CUDA to automatically choose whether to yield to â€¦","Instructs CUDA to block the CPU thread on a â€¦","Instructs CUDA to actively spin when waiting for results â€¦","Instructs CUDA to yield its thread when waiting for â€¦","This enumeration represents the options for configuring â€¦","The size in bytes of each GPU thread stack","Struct representing a range of stream priorities.","Non-owning handle to a CUDA context.","Returns the set containing all flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags â€¦","Toggles the set of flags.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained â€¦","Create a CUDA context for the given device.","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Disables direct access to memory allocations in a peer â€¦","Destroy a <code>Context</code>, returning an error.","","Returns an empty set of flags.","Enables direct access to memory allocations in a peer â€¦","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Convert from underlying bit representation, unless that â€¦","Convert from underlying bit representation, dropping any â€¦","Convert from underlying bit representation, preserving all â€¦","","Get the API version used to create this context.","Get the API version used to create this context.","Returns the preferred cache configuration for the current â€¦","Returns a non-owning handle to the current context.","Return the device ID for the current context.","Return the context flags for the current context.","","","Return resource limits for the current context.","Return resource limits for the current context.","Return the least and greatest stream priorities.","Returns an non-owning handle to this context.","The greatest stream priority","","","","","","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and â€¦","Returns <code>true</code> if there are flags common to both <code>self</code> and â€¦","","","","","","","","","","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","The least stream priority","","","Returns the complement of this set of flags.","","Pop the current context off the stack and return the â€¦","Push the given context to the top of the stack","Removes the specified flags in-place.","Inserts or removes the specified flags depending on the â€¦","Sets the preferred cache configuration for the current â€¦","Set the given context as the current context for this â€¦","Sets a requested resource limit for the current context.","Sets the preferred shared memory configuration for the â€¦","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> â€¦","Block to wait for a contextâ€™s tasks to complete.","","","","","","","Toggles the specified flags in-place.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","P2P Access is enabled","Number of asynchronous engines","Both the <code>CU_STREAM_WAIT_VALUE_FLUSH</code> flag and the â€¦","Device can map host memory into CUDA address space","64-bit operations are supported in ::cuStreamBatchMemOp â€¦","Device can access host registered memory at the same â€¦","<code>cuStreamBatchMemOp</code> and related APIs are supported.","CU_STREAM_WAIT_VALUE_NOR is supported.","Typical clock frequency in kilohertz","Major compute capability version number","Minor compute capability version number","Compute Mode","Device supports compute preemption","Device can possibly execute multiple kernels concurrently","Device can coherently access managed memory concurrently â€¦","Device supports launching cooperative kernels via â€¦","Device can participate in cooperative kernels launched via â€¦","Accessing CUDA arrays over the link supported","Opaque handle to a CUDA device.","All supported device attributes for Device::get_attribute","P2P Attributes","Iterator over all available CUDA devices. See the â€¦","The host can directly access managed memory on the device â€¦","Device has ECC support enabled","Device supports compression of memory","Device supports caching globals in L1","Global memory bus width in bits","Device supports specifying the GPUDirect RDMA flag with â€¦","Device supports exporting memory to a posix file â€¦","Device supports exporting memory to a Win32 NT handle with â€¦","Device supports exporting memory to a Win32 KMT handle â€¦","Link between the device and the host supports native â€¦","Device supports using the <code>cuMemHostRegister</code> flag â€¦","Device is integrated with host memory","Specifies whether there is a run time limit on kernels","Size of L2 cache in bytes.","Device supports caching locals in L1","Device can allocate managed memory on this system","The maximum value of <code>CUaccessPolicyWindow::num_bytes</code>.","Maximum x-dimension of a block","Maximum y-dimension of a block","Maximum z-dimension of a block","Maximum number of blocks per multiprocessor","Maximum x-dimension of a grid","Maximum y-dimension of a grid","Maximum z-dimension of a grid","Deviceâ€™s maximum L2 persisting lines capacity setting in â€¦","Maximum pitch in bytes allowed by the memory copy â€¦","Maximum number of 32-bit registers available to a thread â€¦","Maximum number of 32-bit registers available per â€¦","Maximum amount of shared memory available to a thread â€¦","Maximum optin shared memory per block","Maximum shared memory available per multiprocessor in bytes","Maximum number of threads per block","Maximum resident threads per multiprocessor","Maximum layers in a 1D layered surface","Maximum 1D layered surface width","Maximum 1D surface width","Maximum 2D surface height","Maximum 2D layered surface height","Maximum layers in a 2D layered surface","Maximum 2D layered surface width","Maximum 2D surface width","Maximum 3D surface depth","Maximum 3D surface height","Maximum 3D surface width","Maximum layers in a cubemap layered surface","Maximum cubemap layered surface width","Maximum cubemap surface width","Maximum layers in a 1D layered texture","Maximum 1D layered texture width","Maximum 1D linear texture width","Maximum mipammed 1D texture width","Maximum 1D texture width","Maximum 2D texture height if CUDA_ARRAY3D_TEXTURE_GATHER â€¦","Maximum 2D texture width if CUDA_ARRAY3D_TEXTURE_GATHER is â€¦","Maximum 2D texture height","Maximum 2D layered texture height","Maximum layers in a 2D layered texture","Maximum 2D layered texture width","Maximum 2D linear texture height","Maximum 2D linear texture pitch in bytes","Maximum 2D linear texture width","Maximum mipmapped 2D texture width","Maximum mipmapped 2D texture height","Maximum 2D texture width","Maximum 3D texture depth","Alternate maximum 3D texture depth","Maximum 3D texture height","Alternate maximum 3D texture height","Maximum 3D texture width","Alternate maximum 3D texture width","Maximum layers in a cubemap layered texture","Maximum cubemap layered texture width/height","Maximum cubemap texture width/height","Peak memory clock frequency in kilohertz","Device supports using the ::cuMemAllocAsync and <code>cuMemPool</code> â€¦","Device is on a multi-GPU board","Unique ID for a group of devices on the same multi-GPU â€¦","Number of multiprocessors on device.","Atomic operation over the link supported","Device supports coherently accessing pageable memory â€¦","Device accesses pageable memory via the hostâ€™s page â€¦","PCI bus ID of the device","PCI device ID of the device","PCI domain ID of the device","A relative value indicating the performance of the link â€¦","Device supports using the <code>cuMemHostRegister</code> flag â€¦","Shared memory reserved by CUDA driver per block in bytes","Ratio of single precision performance (in floating-point â€¦","Device supports sparse CUDA arrays and sparse CUDA â€¦","Device supports stream priorities","Alignment requirement for surfaces","Device is using TCC driver model","Alignment requirement for textures","Pitch alignment requirement for textures","External timeline semaphore interop is supported on the â€¦","Memory available on device for constant variables in a â€¦","Device shares a unified address space with the host","Device supports virtual memory management APIs","Warp size in threads","","","","","","","","","Queries if a device may directly access a peer deviceâ€™s â€¦","","","","","","","","","Return an iterator over all CUDA devices.","","","","","","","","","","","","Returns information about this device.","Get a handle to the <code>ordinal</code>â€™th CUDA device.","Queries attributes of the link between two devices.","","","","","","","","","Returns the name of this device.","","","Get the number of CUDA-capable devices.","","","","","Returns the total amount of memory available on the device â€¦","","","","","","","","","","","","","","","","","","","","Error enum which represents all the potential errors â€¦","Result type for most CUDA functions.","","Special result type for <code>drop</code> functions which includes the â€¦","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Specify that the created event should busy-wait on blocking","The default event creation flag.","Specify that the created event does not need to record â€¦","An event to track work submitted to a stream.","Bit flags for configuring a CUDA Event.","Status enum that represents the current status of an event.","Specify that the created event may be used as an â€¦","<code>EventStatus::NotReady</code> indicates that the work captured by â€¦","Ready indicates that all work captured by the event has â€¦","Returns the set containing all flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags â€¦","Toggles the set of flags.","","","","","","","","","","","","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained â€¦","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Destroy an <code>Event</code> returning an error.","","Return the duration between two events.","Returns an empty set of flags.","","","","","","","","","","","","","","Convert from underlying bit representation, unless that â€¦","Convert from underlying bit representation, dropping any â€¦","Convert from underlying bit representation, preserving all â€¦","","","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and â€¦","Returns <code>true</code> if there are flags common to both <code>self</code> and â€¦","","","","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","","Create a new event with the specified flags.","Returns the complement of this set of flags.","","Return whether the stream this event was recorded on (see â€¦","Add the event to the given stream of work. The event will â€¦","Removes the specified flags in-place.","Inserts or removes the specified flags depending on the â€¦","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> â€¦","Wait for an event to complete.","","","Toggles the specified flags in-place.","","","","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","The binary architecture version for which the function was â€¦","Dimensions of a thread block, or the number of threads in â€¦","The attribute to indicate whether the function has been â€¦","The size in bytes of the constant memory required by this â€¦","Handle to a global kernel function.","All supported function attributes for â€¦","Dimensions of a grid, or the number of thread blocks in a â€¦","The size in bytes of local memory used by each thread of â€¦","The maximum size in bytes of dynamically-allocated shared â€¦","The maximum number of threads per block, beyond which a â€¦","The number of registers used by each thread of this â€¦","Preferred shared memory-L1 cache split ratio in percent of â€¦","The PTX virtual architecture version for which the â€¦","The size in bytes of the statically-allocated shared â€¦","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns information about a function.","","","","","","","","Sets the preferred cache configuration for this function.","Sets the maximum dynamic shared memory in bytes for this â€¦","Sets the preferred shared memory configuration for this â€¦","","","","","","","","","","","","","","","","Create a one-dimensional grid of <code>x</code> blocks","Create a one-dimensional block of <code>x</code> threads","Width of grid in blocks","X dimension of each thread block","Create a two-dimensional grid of <code>x * y</code> blocks","Create a two-dimensional block of <code>x * y</code> threads","Create a three-dimensional grid of <code>x * y * z</code> blocks","Create a three-dimensional block of <code>x * y * z</code> threads","Height of grid in blocks","Y dimension of each thread block","Depth of grid in blocks","Z dimension of each thread block","Sealed trait implemented by types which can be the source â€¦","Sealed trait implemented by types which represent â€¦","Sealed trait implemented by types which represent â€¦","Sealed trait implemented by types which can be the source â€¦","Sealed trait implemented by types which represent â€¦","A pointer type for heap-allocation in CUDA device memory.","Fixed-size device-side buffer. Provides basic access to â€¦","An iterator over a <code>DeviceSlice</code> in (non-overlapping) chunks â€¦","An iterator over a <code>DeviceSlice</code> in (non-overlapping) â€¦","A pointer to device memory.","Fixed-size device-side slice.","Fixed-size host-side buffer in page-locked memory.","Sealed trait implemented by types which represent â€¦","A pointer type for heap-allocation in CUDA unified memory.","Fixed-size buffer in unified memory.","A pointer to unified memory.","Calculates the offset from a pointer (convenience for â€¦","Calculates the offset from a pointer (convenience for â€¦","Routines for allocating and using CUDA Array Objects.","Returns the contained device pointer without consuming the â€¦","Returns a <code>DevicePointer&lt;T&gt;</code> to the buffer.","","","","Returns an unsafe mutable device-pointer to the sliceâ€™s â€¦","Extracts a mutable slice of the entire buffer.","Extracts a mutable slice of the entire buffer.","Return a raw device-pointer to the sliceâ€™s buffer.","Returns the contained pointer as a raw pointer. The â€¦","Returns the contained pointer as a raw pointer.","Returns the contained pointer as a mutable raw pointer. â€¦","Returns the contained pointer as a mutable raw pointer.","","","","Extracts a slice containing the entire buffer.","Extracts a slice containing the entire buffer.","Returns the contained unified pointer without consuming â€¦","Returns a <code>UnifiedPointer&lt;T&gt;</code> to the buffer.","Asynchronously copy data from <code>source</code>. <code>source</code> must be the â€¦","","","","","Copies device memory between two contexts asynchronously.","","Asynchronously copy data to <code>dest</code>. <code>dest</code> must be the same â€¦","","","","","Initializes or sets device memory asynchronously with â€¦","","Initializes or sets device memory asynchronously with â€¦","","Initializes or sets device memory asynchronously with â€¦","","","","","","","","","","","","","","","","","","","","","","","","Returns an iterator over <code>chunk_size</code> elements of the slice â€¦","Returns an iterator over <code>chunk_size</code> elements of the slice â€¦","","","","","","","","","","Copy data from <code>source</code>. <code>source</code> must be the same size as <code>self</code>â€¦","","","","","","Copies device memory between two contexts.","","Copy data to <code>dest</code>. <code>dest</code> must be the same size as <code>self</code>.","","","","","","","","Free memory allocated with <code>cuda_malloc</code>.","Free page-locked memory allocated with <code>cuda_malloc_host</code>.","Free memory allocated with <code>cuda_malloc_unified</code>.","Unsafe wrapper around the <code>cuMemAlloc</code> function, which â€¦","Unsafe wrapper around the <code>cuMemAllocHost</code> function, which â€¦","Unsafe wrapper around the <code>cuMemAllocManaged</code> function, â€¦","","","","","","","","","","Destroy a <code>DeviceBox</code>, returning an error.","","Destroy a <code>DeviceBuffer</code>, returning an error.","Destroy a <code>LockedBuffer</code>, returning an error.","","Destroy a <code>UnifiedBox</code>, returning an error.","","","Destroy a <code>UnifiedBuffer</code>, returning an error.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Constructs a DeviceBox from a DevicePointer.","Constructs a DeviceBox from a raw pointer.","Constructs a UnifiedBox from a raw pointer.","Creates a <code>DeviceBuffer&lt;T&gt;</code> directly from the raw components â€¦","Forms a slice from a <code>DevicePointer</code> and a length.","Creates a <code>LockedBuffer&lt;T&gt;</code> directly from the raw components â€¦","Creates a <code>UnifiedBuffer&lt;T&gt;</code> directly from the raw â€¦","Performs the same functionality as <code>from_raw_parts</code>, except â€¦","Allocate a new device buffer of the same size as <code>slice</code>, â€¦","Allocate a new page-locked buffer of the same size as <code>slice</code>â€¦","Allocate a new unified buffer of the same size as <code>slice</code>, â€¦","Asynchronously allocate a new buffer of the same size as â€¦","Constructs a UnifiedBox from a UnifiedPointer.","","","","","","","","","","","","","","","","","","","","","","","","","","","Consumes the DeviceBox, returning the wrapped â€¦","","","Consumes the UnifiedBox, returning the wrapped â€¦","Returns <code>true</code> if the slice has a length of 0.","Returns true if the pointer is null.","Returns true if the pointer is null.","","","","Consumes and leaks the UnifiedBox, returning a mutable â€¦","Returns the number of elements in the slice.","","Allocate device memory and place val into it.","Allocate a new page-locked buffer large enough to hold <code>size</code>â€¦","Allocate unified memory and place val into it.","Allocate a new unified buffer large enough to hold <code>size</code> <code>T</code>â€¦","","","","","","","Returns a null device pointer.","Returns a null unified pointer.","Calculates the offset from a device pointer.","Calculates the offset from a unified pointer.","","","","Initializes or sets device memory with sequence of 16-bit â€¦","","Initializes or sets device memory with sequence of 32-bit â€¦","","Initializes or sets device memory with sequence of 8-bit â€¦","","","","Divides one DeviceSlice into two at a given index.","Divides one mutable DeviceSlice into two at a given index.","Calculates the offset from a pointer (convenience for â€¦","Calculates the offset from a pointer (convenience for â€¦","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Allocate device memory, but do not initialize it.","Allocate a new device buffer large enough to hold <code>size</code> <code>T</code>â€™â€¦","Allocate a new page-locked buffer large enough to hold <code>size</code>â€¦","Allocate unified memory without initializing it.","Allocate a new unified buffer large enough to hold <code>size</code> <code>T</code>â€¦","Wrap the given raw pointer in a DevicePointer. The given â€¦","Wrap the given raw pointer in a UnifiedPointer. The given â€¦","Calculates the offset from a pointer using wrapping â€¦","Calculates the offset from a pointer using wrapping â€¦","Calculates the offset from a device pointer using wrapping â€¦","Calculates the offset from a unified pointer using â€¦","Calculates the offset from a pointer using wrapping â€¦","Calculates the offset from a pointer using wrapping â€¦","Allocate device memory and fill it with zeroes (<code>0u8</code>).","Allocate a new device buffer large enough to hold <code>size</code> <code>T</code>â€™â€¦","Describes a CUDA Array","Describes the format used for a CUDA Array.","A CUDA Array. Can be bound to a texture or surface.","Flags which modify the behavior of CUDA array creation.","Enables creation of cubemaps. If this flag is set, Width â€¦","Single-precision floating point number","Half-precision floating point number","Enables creation of layered CUDA arrays. When this flag is â€¦","Enables surface references to be bound to the CUDA array.","Signed 16-bit integer","Signed 32-bit integer","Signed 8-bit integer","Indicates that the CUDA array will be used for texture â€¦","Unsigned 16-bit integer","Unsigned 32-bit integer","Unsigned 8-bit integer","Returns the set containing all flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags â€¦","Toggles the set of flags.","","","","","","","","","","","","","","","","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained â€¦","","Returns the depth of the ArrayDescripor","Gets the descriptor associated with this array.","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns the dimensions of the ArrayDescriptor","","Try to destroy an <code>ArrayObject</code>. Can fail - if it does, â€¦","Returns an empty set of flags.","","","","Returns the flags of the ArrayDescriptor","","","","","","","","","Returns the format of the ArrayDescripor","","","","","Convert from underlying bit representation, unless that â€¦","Convert from underlying bit representation, dropping any â€¦","Convert from underlying bit representation, preserving all â€¦","Constructs a generic ArrayObject from an <code>ArrayDescriptor</code>.","Creates a new ArrayDescriptor from a set of dimensions and â€¦","","Creates ArrayFormat from the CUDA Driver API enum","Constructs an ArrayDescriptor from a CUDA Driver API Array â€¦","","Returns the height of the ArrayDescripor","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and â€¦","Returns <code>true</code> if there are flags common to both <code>self</code> and â€¦","","","","","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","","Allocates a new CUDA Array that is up to 3-dimensions.","Creates a default flags object with no flags set.","Constructs an ArrayDescriptor from dimensions, format, â€¦","Allocates a new 1D CUDA Array.","Allocates a new CUDA Array that is up to 2-dimensions.","Creates a new Cubemap CUDA Array. The array is represented â€¦","Creates a new Layered 1D or 2D CUDA Array.","Creates a new Layered 1D CUDA Array.","Creates a new Layered Cubemap CUDA Array. The array is â€¦","Returns the complement of this set of flags.","Returns the number of channels in the ArrayDescriptor","","Removes the specified flags in-place.","Inserts or removes the specified flags depending on the â€¦","Sets the depth of the ArrayDescriptor","Sets the dimensions of the ArrayDescriptor","Sets the flags of the ArrayDescriptor.","Sets the format of the ArrayDescriptor","Sets the height of the ArrayDescriptor","Sets the number of channels in the ArrayDescriptor","Sets the width of the ArrayDescriptor","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> â€¦","","","","Converts ArrayFormat to the CUDA Driver API enum","Toggles the specified flags in-place.","","","","","","","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Returns the width of the ArrayDescripor","A compiled CUDA module, loaded into a context.","Handle to a symbol defined within a CUDA module.","","","","","","","Destroy a <code>Module</code>, returning an error.","","","","","","","Get a reference to a kernel function which can then be â€¦","Get a reference to a global symbol, which can then be â€¦","","","Load a module from the given file name into the current â€¦","Load a module from a CStr.","","","","","","","Sealed trait implemented by types which can be the source â€¦","Fixed-size device-side buffer. Provides basic access to â€¦","Fixed-size buffer in unified memory.","Copy data from <code>source</code>. <code>source</code> must be the same size as <code>self</code>â€¦","Copy data to <code>dest</code>. <code>dest</code> must be the same size as <code>self</code>.","No flags set.","No flags set.","This stream does not synchronize with the NULL stream.","A stream of work for the device to perform.","Bit flags for configuring a CUDA Stream.","Bit flags for configuring a CUDA Stream waiting on an CUDA â€¦","Add a callback to a stream.","Returns the set containing all flags.","Returns the set containing all flags.","","Returns the intersection between the two sets of flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Returns the union of the two sets of flags.","Adds the set of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags â€¦","Returns the left flags, but with all the right flags â€¦","Toggles the set of flags.","Toggles the set of flags.","","","","","","","","","","","","","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained â€¦","Returns <code>true</code> if all of the flags in <code>other</code> are contained â€¦","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns the difference between the flags in <code>self</code> and <code>other</code>.","","Destroy a <code>Stream</code>, returning an error.","Returns an empty set of flags.","Returns an empty set of flags.","","","","","","","","","","","","","","","","","","","Convert from underlying bit representation, unless that â€¦","Convert from underlying bit representation, unless that â€¦","Convert from underlying bit representation, dropping any â€¦","Convert from underlying bit representation, dropping any â€¦","Convert from underlying bit representation, preserving all â€¦","Convert from underlying bit representation, preserving all â€¦","","","Return the flags which were used to create this stream.","Return the priority of this stream.","","","Inserts the specified flags in-place.","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and â€¦","Returns the intersection between the flags in <code>self</code> and â€¦","Returns <code>true</code> if there are flags common to both <code>self</code> and â€¦","Returns <code>true</code> if there are flags common to both <code>self</code> and â€¦","","","","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if no flags are currently stored.","","","Create a new stream with the given flags and optional â€¦","Returns the complement of this set of flags.","Returns the complement of this set of flags.","","","Removes the specified flags in-place.","Removes the specified flags in-place.","Inserts or removes the specified flags depending on the â€¦","Inserts or removes the specified flags depending on the â€¦","Returns the set difference of the two sets of flags.","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> â€¦","Returns the symmetric difference between the flags in <code>self</code> â€¦","Wait until a streamâ€™s tasks are completed.","","","Toggles the specified flags in-place.","Toggles the specified flags in-place.","","","","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Make the stream wait on an event."],"i":[0,0,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,1,0,0,1,1,1,2,0,0,1,1,1,1,1,1,2,1,2,1,1,1,1,0,2,1,2,0,1,1,1,1,2,1,1,0,2,0,2,0,1,2,1,1,2,0,0,1,1,0,1,1,1,1,2,1,1,2,1,2,1,2,1,0,0,0,0,0,0,3,4,4,3,3,5,5,4,4,6,6,6,6,4,0,5,5,5,5,0,4,0,0,5,5,5,5,5,5,5,5,6,4,3,5,7,8,9,10,11,6,4,3,5,7,8,9,10,11,6,4,3,5,8,10,6,4,3,5,8,10,5,5,5,7,5,11,7,7,5,11,6,4,3,5,10,5,6,4,3,5,5,5,5,5,7,8,9,10,11,6,4,3,5,7,8,9,10,11,5,5,5,5,7,8,11,11,11,11,7,8,11,11,11,7,10,6,4,3,5,10,5,5,5,6,4,3,5,7,8,9,10,11,5,5,10,5,10,5,5,9,9,5,5,11,11,11,11,5,5,5,11,6,4,3,5,8,10,5,6,4,3,5,7,8,9,10,11,6,4,3,5,7,8,9,10,11,6,4,3,5,7,8,9,10,11,5,12,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,12,0,0,0,0,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,12,13,13,13,13,13,12,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,12,14,15,13,12,14,15,14,13,12,14,15,13,12,14,15,14,13,12,14,13,12,14,15,13,12,14,15,14,14,14,13,12,14,13,12,14,15,15,14,14,15,14,13,12,14,15,14,13,12,14,15,13,12,14,15,13,12,14,15,16,16,16,16,16,16,16,0,0,16,0,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,17,17,17,0,0,0,17,18,18,17,17,17,17,17,17,17,17,17,18,19,17,18,19,17,18,17,18,17,17,17,17,19,19,19,17,17,18,17,17,17,17,17,17,18,19,17,18,19,17,17,17,17,17,17,17,17,17,18,19,17,17,17,19,17,17,19,19,17,17,17,17,17,19,17,18,17,17,18,19,17,18,19,17,18,19,17,20,0,20,20,0,0,0,20,20,20,20,20,20,20,21,22,20,23,21,22,20,23,21,22,20,21,22,20,21,22,20,21,22,20,23,21,21,21,21,21,22,22,22,22,22,20,23,23,20,21,22,20,23,21,22,23,23,23,21,22,20,21,22,20,23,21,22,20,23,21,22,20,23,21,22,21,22,21,22,21,22,21,22,21,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,25,0,26,27,28,29,30,27,28,30,27,24,25,24,25,28,29,30,28,30,29,30,31,26,27,27,27,32,27,31,26,27,27,27,33,27,33,27,33,27,26,34,27,35,36,28,29,29,30,24,25,26,34,27,35,36,28,29,29,30,24,25,27,27,35,24,25,35,24,25,29,24,25,37,26,26,27,27,27,38,27,37,26,26,27,27,27,35,36,0,0,0,0,0,0,34,28,29,30,34,28,29,30,26,26,34,34,28,28,29,29,30,30,29,24,25,26,26,34,27,35,36,28,29,29,29,30,24,24,25,25,26,34,35,36,28,29,30,24,25,26,26,29,34,27,28,30,27,34,28,30,34,29,29,29,29,24,25,27,27,27,27,27,27,27,27,27,27,27,27,26,34,35,36,28,29,30,24,25,26,35,36,29,27,24,25,35,36,29,29,27,29,26,28,29,30,35,36,35,36,35,36,24,25,24,25,29,24,25,39,27,39,27,39,27,35,36,27,27,24,25,35,24,25,29,26,34,35,36,28,29,30,24,25,26,34,35,36,28,29,30,24,25,26,34,27,35,36,28,29,30,24,25,26,34,28,29,30,24,25,24,25,24,25,24,25,26,34,0,0,0,0,40,41,41,40,40,41,41,41,40,41,41,41,40,40,40,40,40,40,40,40,42,41,40,43,42,41,40,43,41,40,43,41,40,43,40,40,40,40,43,42,40,43,42,42,40,41,40,40,43,42,41,40,40,40,40,40,43,43,42,41,40,43,40,40,40,42,43,40,41,43,40,43,40,40,40,42,41,40,43,40,40,40,42,40,43,42,42,42,42,42,42,40,43,40,40,40,43,43,43,43,43,43,43,40,40,40,41,40,43,41,40,42,41,40,43,42,41,40,43,42,41,40,43,40,43,0,0,44,45,44,45,45,45,44,44,44,45,45,44,45,44,44,44,45,44,44,44,45,44,45,44,45,0,0,0,37,37,46,47,46,0,0,0,48,46,47,48,46,47,46,47,46,47,46,47,46,47,46,47,46,47,46,47,48,46,47,48,46,47,46,47,46,47,46,47,46,47,46,47,48,48,46,47,46,47,46,47,46,46,46,46,46,47,47,47,47,47,48,46,47,48,46,47,46,47,46,47,46,47,48,48,46,47,46,47,46,47,46,47,46,47,48,46,47,46,47,46,47,48,46,47,46,47,46,47,46,47,46,47,46,47,46,47,48,46,47,46,47,46,47,48,46,47,48,46,47,48,46,47,48],"f":[null,null,[[]],[[]],[[]],[[["cudaflags",3]]],[[]],[[],["u32",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["cudaflags",3]],[[],["cudaapiversion",3]],[[]],[[]],[[["cudaflags",3]],["ordering",4]],[[["cudaapiversion",3]],["ordering",4]],[[]],[[],["bool",15]],null,null,[[]],[[]],[[["cudaflags",3]],["bool",15]],[[["cudaapiversion",3]],["bool",15]],null,null,[[["intoiterator",8]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[["u32",15]],["option",4]],[[["u32",15]]],[[["u32",15]]],[[["intoiterator",8]]],null,[[],[["cudaresult",6,["cudaapiversion"]],["cudaapiversion",3]]],[[]],[[]],[[["cudaflags",3]],["cudaresult",6]],[[]],[[]],[[],["bool",15]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],null,[[],["i32",15]],null,[[],["i32",15]],null,[[["cudaflags",3]],["bool",15]],[[["cudaapiversion",3]],["bool",15]],[[]],[[["cudaflags",3]],[["option",4,["ordering"]],["ordering",4]]],[[["cudaapiversion",3]],[["option",4,["ordering"]],["ordering",4]]],null,[[],[["cudaresult",6,["context"]],["context",3]]],[[]],[[["bool",15]]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[["contextflags",3]]],[[]],[[],["u32",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["cacheconfig",4]],[[],["resourcelimit",4]],[[],["sharedmemoryconfig",4]],[[],["contextflags",3]],[[],["unownedcontext",3]],[[],["streampriorityrange",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[["contextflags",3]],["ordering",4]],[[]],[[],["bool",15]],[[["device",3],["contextflags",3]],[["cudaresult",6,["context"]],["context",3]]],[[]],[[],["cudaresult",6]],[[["context",3]],[["dropresult",6,["context"]],["context",3]]],[[]],[[]],[[],["cudaresult",6]],[[["cacheconfig",4]],["bool",15]],[[["resourcelimit",4]],["bool",15]],[[["sharedmemoryconfig",4]],["bool",15]],[[["contextflags",3]],["bool",15]],[[["streampriorityrange",3]],["bool",15]],[[["intoiterator",8]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["u32",15]],["option",4]],[[["u32",15]]],[[["u32",15]]],[[["intoiterator",8]]],[[],[["cudaresult",6,["cudaapiversion"]],["cudaapiversion",3]]],[[],[["cudaresult",6,["cudaapiversion"]],["cudaapiversion",3]]],[[],[["cacheconfig",4],["cudaresult",6,["cacheconfig"]]]],[[],[["cudaresult",6,["unownedcontext"]],["unownedcontext",3]]],[[],[["device",3],["cudaresult",6,["device"]]]],[[],[["cudaresult",6,["contextflags"]],["contextflags",3]]],[[],["cucontext",6]],[[],["cucontext",6]],[[["resourcelimit",4]],[["usize",15],["cudaresult",6,["usize"]]]],[[],[["cudaresult",6,["sharedmemoryconfig"]],["sharedmemoryconfig",4]]],[[],[["cudaresult",6,["streampriorityrange"]],["streampriorityrange",3]]],[[],["unownedcontext",3]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],null,[[["contextflags",3]],["bool",15]],[[["streampriorityrange",3]],["bool",15]],[[]],[[["contextflags",3]],[["option",4,["ordering"]],["ordering",4]]],[[],[["cudaresult",6,["unownedcontext"]],["unownedcontext",3]]],[[],["cudaresult",6]],[[]],[[["bool",15]]],[[["cacheconfig",4]],["cudaresult",6]],[[],["cudaresult",6]],[[["usize",15],["resourcelimit",4]],["cudaresult",6]],[[["sharedmemoryconfig",4]],["cudaresult",6]],[[]],[[]],[[]],[[],["cudaresult",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["device",3]],[["cudaresult",6,["bool"]],["bool",15]]],[[],["deviceattribute",4]],[[],["devicep2pattribute",4]],[[],["device",3]],[[],["devices",3]],[[]],[[]],[[]],[[]],[[],[["cudaresult",6,["devices"]],["devices",3]]],[[["deviceattribute",4]],["bool",15]],[[["devicep2pattribute",4]],["bool",15]],[[["device",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[["deviceattribute",4]],[["cudaresult",6,["i32"]],["i32",15]]],[[["u32",15]],[["device",3],["cudaresult",6,["device"]]]],[[["devicep2pattribute",4],["device",3]],[["cudaresult",6,["i32"]],["i32",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["cudaresult",6,["string"]],["string",3]]],[[["device",3]],["bool",15]],[[],[["option",4,["cudaresult"]],["cudaresult",6,["device"]]]],[[],[["cudaresult",6,["u32"]],["u32",15]]],[[]],[[]],[[]],[[]],[[],[["usize",15],["cudaresult",6,["usize"]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[],["cudaerror",4]],[[]],[[["cudaerror",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[["eventflags",3]]],[[]],[[],["u32",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["eventflags",3]],[[],["eventstatus",4]],[[]],[[]],[[["eventflags",3]],["ordering",4]],[[]],[[],["bool",15]],[[]],[[["event",3]],[["dropresult",6,["event"]],["event",3]]],[[]],[[],[["cudaresult",6,["f32"]],["f32",15]]],[[]],[[["eventflags",3]],["bool",15]],[[["eventstatus",4]],["bool",15]],[[["intoiterator",8]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[["u32",15]],["option",4]],[[["u32",15]]],[[["u32",15]]],[[["intoiterator",8]]],[[]],[[]],[[]],[[],["bool",15]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[["eventflags",3]],["bool",15]],[[["eventflags",3]],["cudaresult",6]],[[]],[[["eventflags",3]],[["option",4,["ordering"]],["ordering",4]]],[[],[["cudaresult",6,["eventstatus"]],["eventstatus",4]]],[[["stream",3]],["cudaresult",6]],[[]],[[["bool",15]]],[[]],[[]],[[]],[[],["cudaresult",6]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["gridsize",3]],[[],["blocksize",3]],[[],["functionattribute",4]],[[]],[[]],[[]],[[["gridsize",3]],["bool",15]],[[["blocksize",3]],["bool",15]],[[["functionattribute",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["gridsize",3]],["gridsize",3]],[[["u32",15]],["gridsize",3]],[[]],[[],["gridsize",3]],[[],["gridsize",3]],[[["u32",15]],["blocksize",3]],[[]],[[],["blocksize",3]],[[],["blocksize",3]],[[["blocksize",3]],["blocksize",3]],[[]],[[]],[[["functionattribute",4]],[["cudaresult",6,["i32"]],["i32",15]]],[[]],[[]],[[]],[[]],[[]],[[["gridsize",3]],["bool",15]],[[["blocksize",3]],["bool",15]],[[["cacheconfig",4]],["cudaresult",6]],[[["u32",15]],["cudaresult",6]],[[["sharedmemoryconfig",4]],["cudaresult",6]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["u32",15]],["gridsize",3]],[[["u32",15]],["blocksize",3]],null,null,[[["u32",15]],["gridsize",3]],[[["u32",15]],["blocksize",3]],[[["u32",15]],["gridsize",3]],[[["u32",15]],["blocksize",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["usize",15]],["devicepointer",3]],[[["usize",15]],["unifiedpointer",3]],null,[[],["devicepointer",3]],[[],["devicepointer",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["unifiedpointer",3]],[[],["unifiedpointer",3]],[[["stream",3]],["cudaresult",6]],[[["stream",3],["devicebox",3]],["cudaresult",6]],[[["stream",3]],["cudaresult",6]],[[["devicebuffer",3],["stream",3]],["cudaresult",6]],[[["deviceslice",3],["stream",3]],["cudaresult",6]],[[["stream",3]],["cudaresult",6]],[[["deviceslice",3],["stream",3],["deviceslice",3]],["cudaresult",6]],[[["stream",3]],["cudaresult",6]],[[["devicebox",3],["stream",3]],["cudaresult",6]],[[["stream",3]],["cudaresult",6]],[[["stream",3],["devicebuffer",3]],["cudaresult",6]],[[["stream",3],["deviceslice",3]],["cudaresult",6]],[[["u16",15],["stream",3]],["cudaresult",6]],[[["u16",15],["stream",3]],["cudaresult",6]],[[["u32",15],["stream",3]],["cudaresult",6]],[[["u32",15],["stream",3]],["cudaresult",6]],[[["u8",15],["stream",3]],["cudaresult",6]],[[["u8",15],["stream",3]],["cudaresult",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]],["devicechunks",3]],[[["usize",15]],["devicechunksmut",3]],[[],["devicechunks",3]],[[],["devicepointer",3]],[[],["unifiedpointer",3]],[[]],[[]],[[]],[[["unifiedbox",3]],["ordering",4]],[[["devicepointer",3]],["ordering",4]],[[["unifiedpointer",3]],["ordering",4]],[[],["cudaresult",6]],[[],["cudaresult",6]],[[["devicebox",3]],["cudaresult",6]],[[],["cudaresult",6]],[[["devicebuffer",3]],["cudaresult",6]],[[["deviceslice",3]],["cudaresult",6]],[[],["cudaresult",6]],[[["deviceslice",3],["deviceslice",3]],["cudaresult",6]],[[],["cudaresult",6]],[[["devicebox",3]],["cudaresult",6]],[[],["cudaresult",6]],[[],["cudaresult",6]],[[["deviceslice",3]],["cudaresult",6]],[[["devicebuffer",3]],["cudaresult",6]],[[],["usize",15]],[[],["usize",15]],[[["devicepointer",3]],["cudaresult",6]],[[],["cudaresult",6]],[[["unifiedpointer",3]],["cudaresult",6]],[[["usize",15]],[["devicepointer",3],["cudaresult",6,["devicepointer"]]]],[[["usize",15]],["cudaresult",6]],[[["usize",15]],[["cudaresult",6,["unifiedpointer"]],["unifiedpointer",3]]],[[],["deviceslice",3]],[[]],[[]],[[]],[[],["deviceslice",3]],[[]],[[]],[[]],[[]],[[["devicebox",3]],[["devicebox",3],["dropresult",6,["devicebox"]]]],[[]],[[["devicebuffer",3]],[["dropresult",6,["devicebuffer"]],["devicebuffer",3]]],[[["lockedbuffer",3]],[["dropresult",6,["lockedbuffer"]],["lockedbuffer",3]]],[[]],[[["unifiedbox",3]],[["unifiedbox",3],["dropresult",6,["unifiedbox"]]]],[[]],[[]],[[["unifiedbuffer",3]],[["dropresult",6,["unifiedbuffer"]],["unifiedbuffer",3]]],[[["unifiedbox",3]],["bool",15]],[[["devicepointer",3]],["bool",15]],[[["unifiedpointer",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["result",4,["error"]],["error",3]]],[[["formatter",3]],[["result",4,["error"]],["error",3]]],[[["formatter",3]],[["result",4,["error"]],["error",3]]],[[["formatter",3]],[["result",4,["error"]],["error",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["devicepointer",3]]],[[]],[[]],[[["devicepointer",3],["usize",15]],["devicebuffer",3]],[[["devicepointer",3],["usize",15]],["deviceslice",3]],[[["usize",15]],["lockedbuffer",3]],[[["usize",15],["unifiedpointer",3]],["unifiedbuffer",3]],[[["devicepointer",3],["usize",15]],["deviceslice",3]],[[],["cudaresult",6]],[[],["cudaresult",6]],[[],["cudaresult",6]],[[["stream",3]],["cudaresult",6]],[[["unifiedpointer",3]]],[[["unifiedbox",3]],["bool",15]],[[["unifiedbox",3]],["bool",15]],[[]],[[]],[[]],[[["usize",15],["rangeto",3,["usize"]]]],[[["usize",15],["rangeinclusive",3,["usize"]]]],[[["usize",15],["rangetoinclusive",3,["usize"]]]],[[["rangefrom",3,["usize"]],["usize",15]]],[[["rangefull",3]]],[[["usize",15],["range",3,["usize"]]]],[[["rangefrom",3,["usize"]],["usize",15]]],[[["usize",15],["range",3,["usize"]]]],[[["usize",15],["rangeinclusive",3,["usize"]]]],[[["rangefull",3]]],[[["usize",15],["rangetoinclusive",3,["usize"]]]],[[["usize",15],["rangeto",3,["usize"]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["devicebox",3]],["devicepointer",3]],[[]],[[]],[[["unifiedbox",3]],["unifiedpointer",3]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["option",4]],[[],["option",4]],[[["unifiedbox",3]],["bool",15]],[[["unifiedbox",3]]],[[],["usize",15]],[[["unifiedbox",3]],["bool",15]],[[],["cudaresult",6]],[[["usize",15]],["cudaresult",6]],[[],["cudaresult",6]],[[["usize",15]],["cudaresult",6]],[[],[["deviceslice",3],["option",4,["deviceslice"]]]],[[],[["deviceslice",3],["option",4,["deviceslice"]]]],[[],[["deviceslice",3],["option",4,["deviceslice"]]]],[[],[["deviceslice",3],["option",4,["deviceslice"]]]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[],["devicepointer",3]],[[],["unifiedpointer",3]],[[["isize",15]],["devicepointer",3]],[[["isize",15]],["unifiedpointer",3]],[[["unifiedbox",3]],[["option",4,["ordering"]],["ordering",4]]],[[["devicepointer",3]],[["option",4,["ordering"]],["ordering",4]]],[[["unifiedpointer",3]],[["option",4,["ordering"]],["ordering",4]]],[[["u16",15]],["cudaresult",6]],[[["u16",15]],["cudaresult",6]],[[["u32",15]],["cudaresult",6]],[[["u32",15]],["cudaresult",6]],[[["u8",15]],["cudaresult",6]],[[["u8",15]],["cudaresult",6]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]],["devicepointer",3]],[[["usize",15]],["unifiedpointer",3]],[[]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["cudaresult",6]],[[["usize",15]],["cudaresult",6]],[[["usize",15]],["cudaresult",6]],[[],["cudaresult",6]],[[["usize",15]],["cudaresult",6]],[[],["devicepointer",3]],[[],["unifiedpointer",3]],[[["usize",15]],["devicepointer",3]],[[["usize",15]],["unifiedpointer",3]],[[["isize",15]],["devicepointer",3]],[[["isize",15]],["unifiedpointer",3]],[[["usize",15]],["devicepointer",3]],[[["usize",15]],["unifiedpointer",3]],[[],["cudaresult",6]],[[["usize",15]],["cudaresult",6]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[["arrayobjectflags",3]]],[[]],[[],["c_uint",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["arrayformat",4]],[[],["arrayobjectflags",3]],[[],["arraydescriptor",3]],[[]],[[]],[[]],[[["arrayobjectflags",3]],["ordering",4]],[[]],[[],["bool",15]],[[],["arrayobjectflags",3]],[[],["usize",15]],[[],[["arraydescriptor",3],["cudaresult",6,["arraydescriptor"]]]],[[]],[[]],[[]],[[["arrayobject",3]],[["arrayobject",3],["dropresult",6,["arrayobject"]]]],[[]],[[["arrayformat",4]],["bool",15]],[[["arrayobjectflags",3]],["bool",15]],[[["intoiterator",8]]],[[],["arrayobjectflags",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[],["arrayformat",4]],[[]],[[]],[[]],[[]],[[["c_uint",6]],["option",4]],[[["c_uint",6]]],[[["c_uint",6]]],[[["arraydescriptor",3]],["cudaresult",6]],[[["arrayformat",4]]],[[["intoiterator",8]]],[[["cuarray_format",4]]],[[["cuda_array3d_descriptor",6]]],[[]],[[],["usize",15]],[[]],[[]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[["arrayobjectflags",3]],["bool",15]],[[["arrayformat",4],["c_uint",6]],["cudaresult",6]],[[]],[[["arrayobjectflags",3],["c_uint",6],["arrayformat",4]]],[[["usize",15],["c_uint",6],["arrayformat",4]],["cudaresult",6]],[[["arrayformat",4],["c_uint",6]],["cudaresult",6]],[[["usize",15],["c_uint",6],["arrayformat",4]],["cudaresult",6]],[[["usize",15],["c_uint",6],["arrayformat",4]],["cudaresult",6]],[[["usize",15],["c_uint",6],["arrayformat",4]],["cudaresult",6]],[[["usize",15],["c_uint",6],["arrayformat",4]],["cudaresult",6]],[[]],[[],["c_uint",6]],[[["arrayobjectflags",3]],[["option",4,["ordering"]],["ordering",4]]],[[]],[[["bool",15]]],[[["usize",15]]],[[]],[[["arrayobjectflags",3]]],[[["arrayformat",4]]],[[["usize",15]]],[[["c_uint",6]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["cuarray_format",4]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[],["usize",15]],null,null,[[]],[[]],[[]],[[]],[[],["cudaresult",6]],[[],["cudaresult",6]],[[["module",3]],[["dropresult",6,["module"]],["module",3]]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[["cstr",3]],[["cudaresult",6,["function"]],["function",3]]],[[["cstr",3]],[["cudaresult",6,["symbol"]],["symbol",3]]],[[]],[[]],[[["cstr",3]],[["cudaresult",6,["module"]],["module",3]]],[[["cstr",3]],[["cudaresult",6,["module"]],["module",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,[[],["cudaresult",6]],[[],["cudaresult",6]],null,null,null,null,null,null,[[["box",3]],["cudaresult",6]],[[]],[[]],[[],["custream",6]],[[]],[[]],[[]],[[]],[[["streamflags",3]]],[[["streamwaiteventflags",3]]],[[]],[[]],[[],["u32",15]],[[],["u32",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["streamflags",3]],[[],["streamwaiteventflags",3]],[[]],[[]],[[["streamflags",3]],["ordering",4]],[[["streamwaiteventflags",3]],["ordering",4]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[]],[[["stream",3]],[["dropresult",6,["stream"]],["stream",3]]],[[]],[[]],[[["streamflags",3]],["bool",15]],[[["streamwaiteventflags",3]],["bool",15]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[["u32",15]],["option",4]],[[["u32",15]],["option",4]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[],[["cudaresult",6,["streamflags"]],["streamflags",3]]],[[],[["cudaresult",6,["i32"]],["i32",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["streamflags",3]],["bool",15]],[[["streamwaiteventflags",3]],["bool",15]],[[["option",4,["i32"]],["streamflags",3],["i32",15]],["cudaresult",6]],[[]],[[]],[[["streamflags",3]],[["option",4,["ordering"]],["ordering",4]]],[[["streamwaiteventflags",3]],[["option",4,["ordering"]],["ordering",4]]],[[]],[[]],[[["bool",15]]],[[["bool",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["cudaresult",6]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[["streamwaiteventflags",3],["event",3]],["cudaresult",6]]],"p":[[3,"CudaFlags"],[3,"CudaApiVersion"],[4,"SharedMemoryConfig"],[4,"ResourceLimit"],[3,"ContextFlags"],[4,"CacheConfig"],[3,"Context"],[3,"UnownedContext"],[3,"ContextStack"],[3,"StreamPriorityRange"],[3,"CurrentContext"],[4,"DeviceP2PAttribute"],[4,"DeviceAttribute"],[3,"Device"],[3,"Devices"],[4,"CudaError"],[3,"EventFlags"],[4,"EventStatus"],[3,"Event"],[4,"FunctionAttribute"],[3,"GridSize"],[3,"BlockSize"],[3,"Function"],[3,"DevicePointer"],[3,"UnifiedPointer"],[3,"DeviceBox"],[3,"DeviceSlice"],[3,"LockedBuffer"],[3,"UnifiedBox"],[3,"UnifiedBuffer"],[8,"AsyncCopyDestination"],[8,"AsyncCopyPeer"],[8,"AsyncSetDestination"],[3,"DeviceBuffer"],[3,"DeviceChunks"],[3,"DeviceChunksMut"],[8,"CopyDestination"],[8,"CopyPeer"],[8,"SetDestination"],[3,"ArrayObjectFlags"],[4,"ArrayFormat"],[3,"ArrayObject"],[3,"ArrayDescriptor"],[3,"Module"],[3,"Symbol"],[3,"StreamFlags"],[3,"StreamWaitEventFlags"],[3,"Stream"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};